#!/usr/bin/env bash

args=`getopt n $*`

if [ $? -ne 0 ]; then
       echo 'Usage: ...'
       exit 2
fi
set -- $args
while :; do
  case "$1" in
  -n)
    echo by_number=true
    shift
    ;;
  --)
    shift; break
    ;;
  esac
done

# https://unix.stackexchange.com/a/415155
# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {
    local buf=""

    # little helpers for terminal print control and key input
    ESC=$( printf "\033" )
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        {
      escape_char=$(printf "\u1b")
      read -rsn1 mode &>/dev/null # read 1 char
      if [[ $mode == $escape_char ]]; then
          read -rsn2 mode &>/dev/null # read 2 more chars
      fi
      case $mode in
          'q') echo QUITTING ; exit ;;
          '[A') echo UP ;;
          '[B') echo DN ;;
          '') echo ENTER ;;
          'k') echo UP ;;
          'j') echo DN ;;
          #'[D') echo LEFT ;;
          #'[C') echo RIGHT ;;
          #*) >&2 echo 'ERR bad input'; return ;;
      esac
     }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            ENTER) break;;
            UP)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            DN)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    cursor_blink_on

    return $selected
}


select_option "$@" 1>/dev/tty 2>/dev/tty
result=$?
if [ "$by_number" == "true" ]; then
  echo $(($result+1))
else
  echo ${@:$(($result+1)):1}
fi
